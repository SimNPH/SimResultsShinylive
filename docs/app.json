[{"name":"app.R","content":"\r\n# packages ----------------------------------------------------------------\r\n\r\nlibrary(\"shiny\")\r\nlibrary(\"sortable\")\r\nlibrary(\"ggplot2\")\r\nlibrary(\"patchwork\")\r\nlibrary(\"miniPCH\")\r\n\r\n# data --------------------------------------------------------------------\r\n\r\n# adjust depending on where this is hosted:\r\n# shiny-live served with httpuv\r\n# my_url <- \"http://127.0.0.1:7446/\"\r\n# shiny-live on github pages\r\nmy_url <- \"https://simnph.github.io/SimResultsShinylive/\"\r\ndatasets <- readRDS(gzcon(url(paste0(my_url, \"datasets.Rds\"))))\r\n# shiny local\r\n# my_file <- \"../\"\r\n# datasets <- readRDS(paste0(my_file, \"datasets.Rds\"))\r\nexclude_from_scenario_vars <- c(\"recruitment time\", \"proportion of censored patients\", \"number of patients\")\r\nfilter_scenario_values <- c(\"recruitment time\"=18, \"proportion of censored patients\"=0, \"number of patients\"=1000, \"method\"=\"logrank test\")\r\nscenario_table_vars <- c(\"median survival in the treatment arm\", \"median survival in the control arm\", \r\n                         \"RMST (6m) in the treatment arm\", \"RMST (6m) in the control arm\", \r\n                         \"geometric average hazard ratio (6m)\", \"average hazard ratio (6m)\", \r\n                         \"RMST (12m) in the treatment arm\", \"RMST (12m) in the control arm\", \r\n                         \"geometric average hazard ratio (12m)\", \"average hazard ratio (12m)\", \r\n                         \"milestone survival in the treatment arm (6m)\", \"milestone survival in the control arm (6m)\", \r\n                         \"milestone survival in the treatment arm (12m)\", \"milestone survival in the control arm (12m)\"\r\n)\r\n\r\n# call package functions once to load packages ----------------------------\r\ntmp <- miniPCH::pch_functions(t=0, lambda=1)\r\ntmp <- ggplot(NULL)\r\ntmp <- NULL\r\n\r\n# functions ---------------------------------------------------------------\r\n\r\ncombined_plot <- function(\r\n    data,\r\n    methods,\r\n    xvars,\r\n    yvar,\r\n    facet_x_vars=c(),\r\n    facet_y_vars=c(),\r\n    split_var = 1,\r\n    heights_plots = c(3,1),\r\n    scale_stairs = 0.75,\r\n    grid_level = 2,\r\n    scales = \"fixed\",\r\n    hlines = numeric(0),\r\n    use_colours = NULL,\r\n    use_shapes  = NULL,\r\n    yrange = c(NA_real_, NA_real_)\r\n){\r\n  \r\n  stopifnot(split_var <= length(xvars))\r\n  stopifnot(split_var > 0)\r\n  \r\n  stopifnot(grid_level > 0)\r\n  grid_level <- min(grid_level, length(xvars))\r\n  \r\n  facet_vars_y_sym <- rlang::syms(facet_y_vars)\r\n  facet_vars_x_sym <- rlang::syms(facet_x_vars)\r\n  yvar  <- rlang::sym(yvar)\r\n  \r\n  data <- data |>\r\n    subset(method %in% methods)\r\n  \r\n  # create combined x variable\r\n  data$x <- do.call(interaction, c(data[, xvars], lex.order=TRUE, drop=TRUE)) |>\r\n    as.integer()\r\n  \r\n  # remove rows with missing yvar\r\n  data <- data |> \r\n    subset(!is.na(get(yvar)))\r\n  \r\n  # split lines\r\n  group_vars <- xvars[1:split_var]\r\n  data$x_split <- do.call(interaction, c(data[, group_vars], lex.order=TRUE, drop=TRUE)) |>\r\n    as.integer()\r\n  \r\n  # grid breaks\r\n  grid_vars <- xvars[1:grid_level]\r\n  data$x_grid <-  do.call(interaction, c(data[, grid_vars], lex.order=TRUE))\r\n  grid_breaks <- data$x[order(data$x)][!duplicated(data$x_grid[order(data$x)])]\r\n  \r\n  plot_1 <- ggplot2::ggplot(data, ggplot2::aes(\r\n    x=x,\r\n    y=!!yvar,\r\n    group=interaction(method, x_split),\r\n    colour=method,\r\n    shape=method\r\n  )) +\r\n    ggplot2::annotate(\"rect\", xmin=-Inf, xmax=Inf, ymin=yrange[1], ymax=yrange[2], colour=\"grey\", alpha=0.5) +\r\n    ggplot2::geom_line() +\r\n    ggplot2::geom_point(size=4) +\r\n    ggplot2::scale_x_continuous(\r\n      breaks = grid_breaks,\r\n      minor_breaks = NULL,\r\n      expand = ggplot2::expansion(0,0)\r\n    ) +\r\n    ggplot2::theme(\r\n      axis.text.x = ggplot2::element_blank(),\r\n      axis.ticks.x = ggplot2::element_blank(),\r\n      axis.title.x = ggplot2::element_blank()\r\n    )  +\r\n    ggplot2::facet_grid(\r\n      cols = dplyr::vars(!!!facet_vars_x_sym),\r\n      rows = dplyr::vars(!!!facet_vars_y_sym),\r\n      labeller = ggplot2::label_both,\r\n      scales = scales\r\n    ) +\r\n    ggplot2::geom_hline(yintercept=hlines)\r\n  \r\n  data_plot2 <- data[!duplicated(do.call(interaction, data[,c(\"x\", facet_x_vars)])), ]\r\n  \r\n  plot_2 <- lapply(xvars, \\(xx){\r\n    \r\n    if(is.factor(data_plot2[, xx, drop=TRUE])){\r\n      data_plot2$tmp_yvar <- data_plot2[, xx, drop=TRUE]\r\n    } else {\r\n      data_plot2$tmp_yvar <- factor(format(data_plot2[, xx, drop=TRUE], digits=3))\r\n    }\r\n    \r\n    ggplot2::ggplot(data_plot2, ggplot2::aes(x=x, y=tmp_yvar, group=method)) +\r\n      ggplot2::geom_step(linewidth=0.25) +\r\n      # ggplot2::geom_point(shape=4) +\r\n      ggplot2::scale_x_continuous(\r\n        breaks = grid_breaks,\r\n        minor_breaks = NULL,\r\n        expand = ggplot2::expansion(0,0)\r\n      ) +\r\n      ggplot2::theme_void(\r\n        base_size = 9\r\n      ) +\r\n      ggplot2::theme(\r\n        axis.text.y = ggplot2::element_text(),\r\n        axis.title.y = ggplot2::element_text(angle=75),\r\n        strip.background = ggplot2::element_blank(),\r\n        strip.text = ggplot2::element_blank(),\r\n        panel.grid.major.y = ggplot2::element_line(\r\n          linewidth = 0.125,\r\n          colour=\"lightgray\"\r\n        )\r\n      ) +\r\n      ggplot2::ylab(as.character(xx))  +\r\n      ggplot2::facet_grid(\r\n        cols = dplyr::vars(!!!facet_vars_x_sym)\r\n      )\r\n  })\r\n  \r\n  plot_2 <- patchwork::wrap_plots(plot_2, ncol=1)\r\n  \r\n  if(!is.null(use_colours)){\r\n    plot_1 <- plot_1 +\r\n      ggplot2::scale_colour_manual(values=use_colours)\r\n  }\r\n  \r\n  if(!is.null(use_shapes)){\r\n    plot_1 <- plot_1 +\r\n      ggplot2::scale_shape_manual(values=use_shapes)\r\n  }\r\n  result <- (plot_1 / plot_2) + patchwork::plot_layout(heights=heights_plots)\r\n  result\r\n}\r\n\r\nscenario_plot <- function(scenario, type){\r\n  range_t  <- c(0, 1095.75)\r\n  range_hr <- c(0.7, 1/0.7)\r\n  range_s  <- c(0,1)\r\n  breaks_t <- 365.25 * seq(0,36,by=6) / 12\r\n  \r\n  if(nrow(scenario) == 0){\r\n    return(\r\n      ggplot(data=NULL) + \r\n      geom_text(aes(x=0,y=0, label=\"No scenarios for selected parameter combination.\")) + \r\n      theme_void()\r\n    )\r\n  }\r\n  \r\n  # construct functions\r\n  if(type %in% c(\"delayed\", \"crossing\", \"subgroup\")){\r\n    funs_a <- miniPCH::pch_functions(\r\n      t=0, \r\n      lambda=scenario$hazard_ctrl\r\n    )\r\n  } else {\r\n    funs_a <- miniPCH::multistate_functions(\r\n      t = 0,\r\n      Q = array(matrix(c(\r\n          -(scenario$hazard_ctrl + scenario$prog_rate_ctrl),     scenario$prog_rate_ctrl,       scenario$hazard_ctrl,\r\n                                                          0, -scenario$hazard_after_prog, scenario$hazard_after_prog,\r\n                                                          0,                           0,                          0\r\n        ), 3, 3, byrow = TRUE),\r\n        dim=c(3,3,1)\r\n      ),\r\n      pi = c(1,0,0),\r\n      abs = c(0,0,1)\r\n    )\r\n  }\r\n  \r\n  switch(\r\n    type,\r\n    delayed = {\r\n      if(scenario$delay == 0){\r\n        funs_b <- miniPCH::pch_functions(\r\n          t = c(0),\r\n          lambda = c(scenario$hazard_trt)\r\n        )\r\n      } else {\r\n        funs_b <- miniPCH::pch_functions(\r\n          t = c(0, 365.25 * scenario$delay / 12),\r\n          lambda = c(scenario$hazard_ctrl, scenario$hazard_trt)\r\n        )\r\n      }\r\n    },\r\n    crossing = {\r\n      if(scenario$crossing == 0){\r\n        funs_b <- miniPCH::pch_functions(\r\n          t = c(0),\r\n          lambda = c(scenario$hazard_trt_after)\r\n        )\r\n      } else {\r\n       funs_b <- miniPCH::pch_functions(\r\n         t = c(0, 365.25 * scneario$crossing / 12),\r\n         lambda = c(scenario$hazard_trt_before, scenario$hazard_trt_after)\r\n       )\r\n      }\r\n    },\r\n    subgroup = {\r\n      funs_b <- miniPCH::multistate_functions(\r\n        t = 0,\r\n        Q = array(matrix(c(\r\n            -scenario$hazard_subgroup,                    0, scenario$hazard_subgroup,\r\n                                    0, -scenario$hazard_trt,      scenario$hazard_trt,\r\n                                    0,                    0,                        0\r\n          ), 3,3, byrow = TRUE),\r\n          dim=c(3,3,1)\r\n        ),\r\n        pi = c(scenario$prevalence, (1-scenario$prevalence),0),\r\n        abs = c(0,0,1)\r\n      )\r\n    },\r\n    progression = {\r\n      funs_b <- miniPCH::multistate_functions(\r\n        t = 0,\r\n      Q = array(matrix(c(\r\n          -(scenario$hazard_trt + scenario$prog_rate_trt),      scenario$prog_rate_trt,        scenario$hazard_trt,\r\n                                                        0, -scenario$hazard_after_prog, scenario$hazard_after_prog,\r\n                                                        0,                           0,                          0\r\n        ), 3, 3, byrow = TRUE),\r\n        dim=c(3,3,1)\r\n      ),\r\n        pi = c(1,0,0),\r\n        abs = c(0,0,1)\r\n      )\r\n    }\r\n  )\r\n  \r\n  hr <- \\(t){\r\n    funs_b$h(t) / funs_a$h(t)\r\n  }\r\n  \r\n  # plot\r\n  plot_s <- ggplot(NULL) + \r\n    stat_function(aes(colour=\"control\"  , lty=\"control\"  ),   fun=funs_a$s) + \r\n    stat_function(aes(colour=\"treatment\", lty=\"treatment\"), fun=funs_b$s) + \r\n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) + \r\n    scale_y_continuous(limits=range_s, expand=expansion(0,0), name=\"survival\")\r\n  \r\n  plot_h <- ggplot(NULL) + \r\n    stat_function(aes(colour=\"control\"  , lty=\"control\"  ),   fun=funs_a$h) + \r\n    stat_function(aes(colour=\"treatment\", lty=\"treatment\"), fun=funs_b$h) + \r\n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) +\r\n    scale_y_continuous(name=\"hazard\") +\r\n    expand_limits(y=0)\r\n  \r\n  plot_hr <- ggplot(NULL) + \r\n    stat_function(fun=hr) + \r\n    geom_hline(yintercept = 1, colour=\"darkgray\") +\r\n    scale_x_continuous(limits=range_t, expand=expansion(0,0), name=\"time [m]\", breaks=breaks_t, labels=\\(x){12*x/365.25}) +\r\n    scale_y_continuous(limits=range_hr, expand=expansion(0,0.1), name=\"hazard ratio\")\r\n  \r\n  my_colors <- palette.colors(3, \"Okabe-Ito\")[c(2,3)] |>\r\n    setNames(c(\"control\", \"treatment\"))\r\n  \r\n  my_lty <- c(1, 3) |>\r\n    setNames(c(\"control\", \"treatment\"))\r\n  \r\n  \r\n  patchwork::wrap_plots(plot_s, plot_h, plot_hr) +\r\n    patchwork::plot_layout(guides = \"collect\") &\r\n    ggplot2::theme_bw() &\r\n    ggplot2::theme(legend.position=\"bottom\") &\r\n    ggplot2::scale_colour_manual(\r\n      values = my_colors,\r\n      name = \"group\"\r\n    ) &\r\n    ggplot2::scale_linetype_manual(\r\n      values = my_lty,\r\n      name = \"group\"\r\n    )\r\n}\r\n\r\n# ui ----------------------------------------------------------------------\r\n\r\nui <- fluidPage(\r\n  titlePanel(title=\"Results: A simulation-based comparison of statistical methods for time-to-event data analysis under non-proportional hazards\", windowTitle = \"Sim Results CONFIRMS NPH\"),\r\n  tabsetPanel(\r\n# Tab: Description --------------------------------------------------------\r\n    tabPanel(\r\n      \"Description\",\r\n      includeHTML(\"description.html\"),\r\n      style=\"margin-top:1rem;\"\r\n    ),\r\n# Tab: Scenarios ----------------------------------------------------------\r\n    tabPanel(\r\n      \"Scenarios\",\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          selectInput(\r\n            inputId = \"scenarios_scenarioclass\",\r\n            label = \"Scenario\",\r\n            choices = names(datasets)\r\n          ),\r\n          uiOutput(\r\n            outputId = \"scenario_scenariofilter_ui\"\r\n          )\r\n        ),\r\n        mainPanel(\r\n          actionButton(\r\n            inputId = \"scenario_draw\",\r\n            label = \"redraw\",\r\n            icon = icon(\"redo\")\r\n          ),\r\n          plotOutput(\r\n            \"scenario_plot\",\r\n            width=\"100%\",\r\n            height=\"600px\"\r\n          ),\r\n          tableOutput(\r\n            \"scenario_table\"\r\n          )\r\n        )\r\n      ),\r\n      style=\"margin-top:1rem;\"\r\n    ),\r\n# Tab: Results ------------------------------------------------------------\r\n    tabPanel(\r\n      \"Simulation Results\",\r\n      sidebarLayout(\r\n        sidebarPanel(\r\n          selectInput(\r\n            inputId = \"results_scenarioclass\",\r\n            label = \"Scenario\",\r\n            choices = names(datasets)\r\n          ),\r\n          uiOutput(\r\n            outputId = \"results_methods_ui\"\r\n          ),\r\n          uiOutput(\r\n            outputId = \"results_yvar_ui\"\r\n          ),\r\n          uiOutput(\r\n            outputId = \"results_scenariofilter_ui\"\r\n          ),\r\n          uiOutput(\r\n            outputId = \"results_filters_ui\"\r\n          )\r\n        ),\r\n        mainPanel(\r\n          actionButton(\r\n            inputId = \"results_draw\",\r\n            label = \"redraw\",\r\n            icon = icon(\"redo\")\r\n          ),\r\n          plotOutput(\r\n            \"results_plot\",\r\n            width=\"100%\",\r\n            height=\"800px\"\r\n          ),\r\n          checkboxInput(\"hline0025\", \"horizontal line at 0.025 (nominal alpha)\"),\r\n          checkboxInput(\"hline0031\", \"horizontal line at 0.031 (nominal alpha + CI)\"),\r\n          checkboxInput(\"hline095\",  \"horizontal line at 0.95 (nominal CI coverage)\"),\r\n          checkboxInput(\"rectCoverage\", \"ribbon from 0.9584 to 0.9412 (nominal coverage + CI)\")\r\n        )\r\n      ),\r\n      style=\"margin-top:1rem;\"\r\n    )\r\n  )\r\n)\r\n\r\n# server ------------------------------------------------------------------\r\n\r\nserver <- function(input, output) {\r\n\r\n# Tab Results: reactive values --------------------------------------------\r\n  \r\n  scenario_class <- reactive({\r\n    datasets[[input$results_scenarioclass]]\r\n  })\r\n  \r\n  filter_vars <- reactive({\r\n    input$filter_vars\r\n  })\r\n  \r\n\r\n# Tab Results: render UI --------------------------------------------------\r\n\r\n  output$results_methods_ui <- renderUI({\r\n    selectInput(\r\n      inputId = \"results_methods\",\r\n      label = \"Methods\",\r\n      choices = scenario_class()$methods,\r\n      multiple = TRUE,\r\n      selected = c(\"logrank test\", \"max-combo test\", \"modestly wtd. t*=8m\")\r\n    )\r\n  })\r\n  \r\n  output$results_yvar_ui <- renderUI({\r\n    selectInput(\r\n      inputId = \"results_yvar\",\r\n      label = \"Plot Variable\",\r\n      selected = \"rejection rate, one sided alpha=0.025\",\r\n      choices = names(scenario_class()$data)\r\n    )\r\n  })\r\n  \r\n  output$results_scenariofilter_ui <- renderUI({\r\n    bucket_list(\r\n      header=\"Scenario Parameters\",\r\n      group_name=\"scenario_params\",\r\n      orientation = \"vertical\",\r\n      add_rank_list(\r\n        text = \"x-Axis\",\r\n        labels=scenario_class()$design_variables,\r\n        input_id = \"loop_xvars\"\r\n      ),\r\n      add_rank_list(\r\n        text = \"Facets, Columns\",\r\n        labels=NULL,\r\n        input_id = \"facets_cols\"\r\n      ),\r\n      add_rank_list(\r\n        text = \"Facets, Rows\",\r\n        labels=NULL,\r\n        input_id = \"facets_rows\"\r\n      ),\r\n      add_rank_list(\r\n        text = \"Filter\",\r\n        labels=NULL,\r\n        input_id = \"filter_vars\"\r\n      )\r\n    )\r\n  })\r\n  \r\n  output$results_filters_ui <- renderUI({\r\n    lapply(filter_vars(), \\(var){\r\n      selectInput(\r\n        inputId = paste0(\"filter_\", var),\r\n        label = var,\r\n        choices = scenario_class()$filter_values[[var]]\r\n      )\r\n    })\r\n  })\r\n\r\n# Tab Results: Plot -------------------------------------------------------\r\n\r\n  output$results_plot <- renderPlot({\r\n    tmp_data <- scenario_class()$data \r\n    tmp_methods <- input$results_methods\r\n    tmp_xvars <- input$loop_xvars\r\n    tmp_yvar <- input$results_yvar\r\n    tmp_cols <- input$facets_cols\r\n    tmp_rows <- input$facets_rows\r\n    tmp_filter <- input$filter_vars\r\n    \r\n    tmp_filter_values <- sapply(\r\n      tmp_filter,\r\n      \\(i){input[[paste0(\"filter_\", i)]]}\r\n    )\r\n    names(tmp_filter_values) <- tmp_filter\r\n    \r\n    for(i in tmp_filter){\r\n      tmp_data <- tmp_data[tmp_data[, i] == tmp_filter_values[i], ]\r\n    }\r\n    \r\n    hlines <- c()\r\n    if(input$hline0025){\r\n      hlines <- c(hlines, 0.025)\r\n    }\r\n    if(input$hline0031){\r\n      hlines <- c(hlines, 0.031)\r\n    }\r\n    if(input$hline095){\r\n      hlines <- c(hlines, 0.95)\r\n    }\r\n    \r\n    if(input$rectCoverage){\r\n      yrange=c(0.9412, 0.9584)\r\n    } else {\r\n      yrange = c(NA_real_, NA_real_)\r\n    }\r\n          \r\n          \r\n    combined_plot(\r\n      tmp_data,\r\n      tmp_methods,\r\n      tmp_xvars,\r\n      tmp_yvar,\r\n      tmp_cols,\r\n      tmp_rows,\r\n      hlines = hlines,\r\n      yrange = yrange\r\n    )\r\n  }) |> bindEvent(input$results_draw)\r\n  \r\n\r\n# Tab Scenarios: reactive values ------------------------------------------\r\n\r\n  scenario_filter_vars <- reactive({\r\n    res <- datasets[[input$scenarios_scenarioclass]]$filter_values\r\n    res <- res[!(names(res) %in% exclude_from_scenario_vars)]\r\n    res\r\n  })\r\n  \r\n  scenario_data <- reactive({\r\n    tmp_data <- datasets[[input$scenarios_scenarioclass]]$data\r\n    tmp_filter <- names(scenario_filter_vars())\r\n    \r\n    tmp_filter_values <- sapply(\r\n      tmp_filter,\r\n      \\(i){input[[paste0(\"scenario_filter_\", i)]]}\r\n    )\r\n    names(tmp_filter_values) <- tmp_filter\r\n    \r\n    tmp_filter_values <- c(tmp_filter_values, filter_scenario_values)\r\n    for(i in names(tmp_filter_values)){\r\n      tmp_data <- tmp_data[tmp_data[, i] == tmp_filter_values[i], ]\r\n    }\r\n    \r\n    tmp_data\r\n  })|> \r\n    bindEvent(input$scenario_draw)\r\n\r\n# Tab Scenarios: renderUI -------------------------------------------------\r\n\r\n  output$scenario_scenariofilter_ui <- renderUI({\r\n    lapply(names(scenario_filter_vars()), \\(var){\r\n      selectInput(\r\n        inputId = paste0(\"scenario_filter_\", var),\r\n        label = var,\r\n        choices = scenario_filter_vars()[[var]]\r\n      )\r\n    })\r\n  })\r\n\r\n# Tab Scenarios: Plot -----------------------------------------------------\r\n  \r\n  output$scenario_plot <- renderPlot({\r\n    scenario_plot(scenario_data(), input$scenarios_scenarioclass)\r\n  }) |> \r\n    bindEvent(input$scenario_draw)\r\n  \r\n\r\n# Tab Scenario: Table -----------------------------------------------------\r\n  \r\n  output$scenario_table <- renderTable({\r\n    tmp_data <- scenario_data()[, ] |>\r\n      subset(select=scenario_table_vars)\r\n    \r\n    data.frame(\r\n      `Summary Statistic` = names(tmp_data),\r\n      `Value`             = t(tmp_data[1,]),\r\n      check.names = FALSE\r\n    )\r\n  }) \r\n  \r\n  \r\n  \r\n} # end server\r\n\r\n\r\n# run ---------------------------------------------------------------------\r\n\r\n\r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"description.html","content":"<div style=\"max-width:750px;\">\r\n<div id=\"introduction\" class=\"section level2\">\r\n<h2>Introduction<\/h2>\r\n<p>This Shiny App presents the Results of a <a href=\"https://arxiv.org/abs/2310.05622\">Simulation Study<\/a> to Evaluate\r\nthe Performance Characteristics of Statistical Methods for the Analysis\r\nof Time-To-Event Data Under Non-Proportional Hazards.<\/p>\r\n<p>The application is organised into 3 sections.<\/p>\r\n<div id=\"introduction-1\" class=\"section level3\">\r\n<h3>Introduction<\/h3>\r\n<p>This tab contains this text describing the app and the presented\r\ndata.<\/p>\r\n<\/div>\r\n<div id=\"scenarios\" class=\"section level3\">\r\n<h3>Scenarios<\/h3>\r\n<p>This tab allows users to display the underlying survival distribution\r\nthat was used in the simulation.<\/p>\r\n<ul>\r\n<li>A class of scenarios can be selected with the dropdown menu\r\n‘Scenarios’<\/li>\r\n<li>Depending on the selected scenario values for different parameters\r\ncan be selected.<\/li>\r\n<li>In the plot panel the survival curves, hazard curves and hazard\r\nratio of the current scenario and parameter settings are displayed.<\/li>\r\n<li>A table of summary statistics of the current scenario and parameter\r\nsettings is printed.<\/li>\r\n<li>Note that not every combination of parameters was simulated. If the\r\ncombination of parameters is not present in the results a note is\r\ndisplayed in the plot panel.<\/li>\r\n<\/ul>\r\n<\/div>\r\n<div id=\"simulation-results\" class=\"section level3\">\r\n<h3>Simulation Results<\/h3>\r\n<p>This tab allows users to explore the results of the simulation study.\r\nThe data to be displayed can be selected as follows:<\/p>\r\n<ul>\r\n<li>A class of scenarios can be selected with the dropdown menu\r\n‘Scenarios’<\/li>\r\n<li>Methods to be compared can be added and removed. Methods can be\r\nadded from the dropdown menu or by searching. Methods can be removed by\r\nplacing the cursor and typing backspace.<\/li>\r\n<li>The performance metrics, that should be compared for the methods can\r\nbe selected with the dropdown menu ‘y-Axis.’<\/li>\r\n<li>Depending on the selected scenario different parameters can be\r\ndisplayed and used for filtering. The parameters can be arranged by drag\r\nand drop.\r\n<ul>\r\n<li>x-Axis: Parameters in this area are displayed on the x-axis of the\r\nplot in the manner of a nested loop plot. Parameters first in the list\r\nvary slowest parameters last vary fastest.<\/li>\r\n<li>Facets, Columns: Parameters in this area are used to split the plot\r\ninto panels horizontally. More than one parameter can be put here to\r\ncreate a column for each combination of parameters.<\/li>\r\n<li>Facets, Columns: Parameters in this area are used to split the plot\r\ninto panels vertically. More than one parameter can be put here to\r\ncreate a row for each combination of parameters.<\/li>\r\n<li>Filter: For parmeters in this area a dropdown menu is displayed to\r\nto allow the data in the plot to be restricted to a certain parameter\r\nvalue.<\/li>\r\n<\/ul><\/li>\r\n<li>Checkboxes for plot annotations: Horizontal lines and ribbons can be\r\nadded to the plot at\r\n<ul>\r\n<li>0.025, the nominal Type I error rate for the tests<\/li>\r\n<li>0.031, the nominal Type I error rate plus the Monte Carlo confidence\r\ninterval under the null of the method maintaining the nominal Type I\r\nerror rate (95% of observations of the rejection rate of methods that\r\ncontrol the Type I error rate at the nominal level should fall under\r\nthis value.)<\/li>\r\n<li>0.95, the nominal CI coverage<\/li>\r\n<li>From 0.9584 to 0.9412, the nominal CI coverage plus the Monte Carlo\r\nconfidence interval under the null of the method maintaining the nominal\r\ncoverage (95% of observations of the rejection rate of methods that\r\ncontrol the Type I error rate at the nominal level should fall under\r\nthis value.)<\/li>\r\n<\/ul><\/li>\r\n<\/ul>\r\n<\/div>\r\n<\/div>\r\n<\/div>","type":"text"}]
